<%- include('partials/header') %>

<section class="content">

    <h1> <span class="animated"> >> </span> ABOUT THIS SITE <span class="animated">
            << </span> </h1> <div class="textbox border">

                <p class="padded">

                    This site is built using <a href="https://nodejs.org/en/">Node</a> and <a href="https://expressjs.com/">Express</a> and hosted on <a href="https://heroku.com/">Heroku</a>.


                    As well as providing a portfolio of my projects online, it also serves as a playground for utilizing different JavaScript code on the front and backend.

                    <br>
                    <br>
                    Current dependencies for this site, updated @ <%= moment().format('h:mm a') %>
                    <br>
                    <br>
                    <code>
                        <% dependencies.forEach(item => { %>
                        <%= item %>
                        <% }) %>
                    </code>
                    <hr>
                    <h2 class="padded-x centered"> Main Code Features</h2>
                    <hr>
                    <ul class="langlist padded-x">
                        <li class="langpopup">
                            JSON Data Storage<i class="fas fa-chevron-down thin"></i> </li>
                        <div class="popup hidden">

                            New projects are added to the portfolio through a JSON config file. This includes a number of parameters used in frontend HTML generation.
                            For example, a project config object looks like this:
                            <pre>
                        <code class='json'>
                        <%- exampleProject %>
                        </code>
                    </pre>
                            These parameters are then used by a front-end embed script to generate the HTML for each project.

                            <pre>
                            <code class='javascript'>
<%=  // template for project
function makeProject (item) {
// generate div id from project name
    const divId = item.name.split(" ")[0].toLowerCase();

// .card padded border > projectbuttons > expandproject
return `<div class="card padded border" id="${divId}">
    <div class="projectbuttons">
        <a title="Expand" class="expand" href="#${divId}">/a>
        <a title="Demo" class="" target="_blank" href="${item.url}"></a>
        <a title="GitHub" class="" target="_blank" href="${item.repo}"></i></a>
    </div>
    <h2 class="centered"> ${item.name} </h2>
    <hr>
    ${embed(item)}
    <p class="small">${item.caption} </p>
    <p class="tags">${item.languages.join(", ")}</p>
</div>`;
};
%> 
                            </code>
                        </pre>
                            This allows me to flexibly add and remove projects from the projects page using templating and dynamic scripting.
                        </div>

                        <li class="langpopup"> Random Colour Palette Generation <i class="fas fa-chevron-down thin"></i> </li>
                        </li>
                        <div class="popup hidden">

                            On each page load, a random CSS colour pallete is generated and updated using a <code> Colour </code> class object.
                            <pre><code class="javascript">
<%- 
class Colour {
    constructor() {
        this.min = 0;
        this.max = 35;
        this.r = this.randRange(this.min, this.max);
        this.g = this.randRange(this.min, this.max);
        this.b = this.randRange(this.min, this.max);
    }
    randRange() {
        return Math.floor(Math.random() * (this.max - this.min) + this.min);
    }
    randomColor() {
        this.r = this.randRange(this.min, this.max);
        this.g = this.randRange(this.min, this.max);
        this.b = this.randRange(this.min, this.max);
        return `rgb(${this.r},${this.g},${this.b})`;
    }
    animateColour(selector, background, foreground, secondaryforeground, secondaryBackground, time) {
        $(selector).css("--main-bg", background);
        $(selector).css("--main-fg", foreground);
        $(selector).css("--sec-fg", secondaryforeground);
        $(selector).css("--sec-bg", secondaryBackground);

        $(selector).animate({
            backgroundColor: background,
            color: foreground
        }, time);
    }
}
%> 
                                                </code></pre>
                            This allows me to call the <code>animateColour </code> on DOM load and generate a complementary colour pallete by converting the CSS RGB value to HSL. The CSS <code>--main-fg</code> variables are generated by rotating the background colour hue 180 Degrees
                            <pre><code class="javascript">
// instantiate new Colour object
const c = new Colour()
// params: selector, 
// background colour, 
// main-fg(saturation, brightness), 
// sec-fg(saturation,brightness), 
// animation time

c.animateColour('body', 
c.randomColor(), 
c.opposite(25, 80),
c.opposite(40, 60),
 500)




</code></pre>
                        </div>


                    </ul>



                </p>









                </div>




</section>


<%- include('partials/footer') %>